; MACROS

b = $93
temp_b = $97

        ;
        ; new macros        
        ;
        
        ;  ============ 16 bit support ============== source can be 16-costant or a memory location
                
        ;  add.w dest, source               
        ;  add.w dest, source, 1            
        ;  adc.w dest, source                 

        ;  sub.w dest, source               
        ;  sub.w dest, source, 1            
        ;  sub.w dest, source                 
                
        ;  mov.w dest, source 
                      
        ;  mov.w ay,   source
        ;  mov.w ax,   source
        
        ;  mov.w dest, ax
        ;  mov.w dest, ay
                
        ;  cmp.w dest, source               ; (equal only compare) source can be costant or word in memory
        
        ;  shl.w dest
        ;  shr.w dest
        
        ;  push.w source
        ;  pull.w dest
        
        ;  zero.w dest
        
        ;  ============ mic 8-bit macros ==============
        
        ;  poke mem, val
        ;  mov mem, val
                
        ;  shr mem
        ;  shl mem   
        
        ;  push a
        ;  push x
        ;  push y
        ;  pop  a
        ;  pop  x
        ;  pop  y                                 
        
        ;  =========== pseudo register b ========= needs b and temp_b in zero page
        
        ;  tba
        ;  tbx
        ;  tby
        ;  tab
        ;  txb
        ;  tyb
        ;  inb
        ;  deb
        ;  addb
        ;  subb
        ;  phb
        ;  plb
        ;  cpb
        ;  ldb
        ;  stb
        
        ; ==========
                        
        macro add.w mem, const
           lda {1}
           clc
           adc #[[{2}]%256]
           sta {1}
           lda {1}+1
           adc #[[{2}]/256]
           sta {1}+1                    
        end macro
        
        macro add.w mem, mem
           lda {1}
           clc
           adc {2}
           sta {1}
           lda {1}+1
           adc {2}+1
           sta {1}+1                    
        end macro
        
        macro add.w mem, const, "1"
           lda {1}
           sec
           adc #[[{2}]%256]
           sta {1}
           lda {1}+1
           adc #[{2}/256]
           sta {1}+1                    
        end macro
        
        macro add.w mem, mem, "1"
           lda {1}
           sec
           adc {2}
           sta {1}
           lda {1}+1
           adc {2}+1
           sta {1}+1                    
        end macro
         
        macro adc.w mem, const
           lda {1}
           adc #[[{2}]%256]
           sta {1}
           lda {1}+1
           adc #[[{2}]/256]
           sta {1}+1                    
        end macro
        
        macro adc.w mem, mem
           lda {1}
           adc {2}
           sta {1}
           lda {1}+1
           adc {2}+1
           sta {1}+1                    
        end macro

        macro sub.w mem, const
           lda {1}
           sec
           sbc #[[{2}]%256]
           sta {1}
           lda {1}+1
           sbc #[[{2}]/256]
           sta {1}+1                    
        end macro
        
        macro sub.w mem, mem
           lda {1}
           sec
           sbc {2}
           sta {1}
           lda {1}+1
           sbc {2}+1
           sta {1}+1                    
        end macro
        
        macro sub.w mem, const, "1"
           lda {1}
           clc
           sbc #[[{2}]%256]
           sta {1}
           lda {1}+1
           sbc #[[{2}]/256]
           sta {1}+1                    
        end macro
        
        macro sub.w mem, mem, "1"
           lda {1}
           clc
           sbc {2}
           sta {1}
           lda {1}+1
           sbc {2}+1
           sta {1}+1                    
        end macro
         
        macro sbc.w mem, const
           lda {1}
           sbc #[[{2}]%256]
           sta {1}
           lda {1}+1
           sbc #[[{2}]/256]
           sta {1}+1                    
        end macro
        
        macro sbc.w mem, mem
           lda {1}
           sbc {2}
           sta {1}
           lda {1}+1
           sbc {2}+1
           sta {1}+1                    
        end macro
        
        macro inc.w mem
           inc {1}
           bne .lab1
           inc {1}+1
.lab1:
        end macro
        
        macro dec.w mem
           dec {1}
           bne .lab1
           dec {1}+1
.lab1:        
        end macro

        macro mov.w mem, const
           lda #[[{2}]%256]
           sta {1}
           lda #[[{2}]/256]
           sta {1}+1
        end macro
        
        macro mov.w mem, mem
           lda {2}
           sta {1}
           lda {2}+1
           sta {1}+1
        end macro
        
        macro mov.w "ay", const
           lda #[[{1}]%256]
           ldy #[[{1}]/256]
        end macro

        macro mov.w "ay", mem
           lda {1}
           ldy {1}+1
        end macro

        macro mov.w "ax", const
           lda #[[{1}]%256]
           ldy #[[{1}]/256]
        end macro

        macro mov.w "ax", mem
           lda {1}
           ldy {1}+1
        end macro
        
        macro mov.w mem, "ay"
           sta {1}
           sty {1}+1
        end macro

        macro mov.w mem, "ax"
           sta {1}
           stx {1}+1
        end macro

        macro cmp.w mem, const
           lda {1}+1
           cmp #[[{2}]/256]
           bne .lab1
           lda {1}
           cmp #[[{2}]%256]
           .lab1:
        end macro
                
        macro cmp.w mem, mem
           lda {1}+1
           cmp {2}+1
           bne .lab1
           lda {1}
           cmp {2}
           .lab1:
        end macro
                 
        macro shl.w mem
           asl {1}
           rol {1}+1
        end macro
        
        macro shr.w mem
           lsr {1}
           ror {1}+1
        end macro
        
        macro push.w mem
           lda {1}
           pha
           lda {1}+1
           pha
        end macro
                
        macro push.w const
           lda #[[{1}]%256]
           pha
           lda #[[{1}]/256]
           pha
        end macro
        
        macro pop.w mem
           pla 
           sta {1}+1
           pla 
           sta {1}
        end macro
        
        macro zero.w mem
            lda #0
            sta mem
            sta mem+1
        end macro 
        
        ; ======================================

        macro poke mem, const
           lda #{2}
           sta {1}
        end macro

        macro poke mem, mem
           lda {2}
           sta {1}
        end macro

        macro mov mem, const
           lda #{2}
           sta {1}
        end macro

        macro mov mem, mem
           lda {2}
           sta {1}
        end macro
        
        mac shl
           asl {0}
        endm

        mac shr
           lsr {0}
        endm          
        
        macro push "a"           
           pha
        end macro     

        macro push "x"
           txa
           pha
        end macro     

        macro push "y"
           tya
           pha
        end macro
        
        macro pop "a"
           pla
        end macro     

        macro pop "x"
           pla
           tax
        end macro     

        macro pop "y"
           pla
           tay
        end macro
        
        ; ======================================

        ; macro for b register
        ; needs b and temp_b in zero page

        mac tba
           lda b
        endm

        mac tbx
           ldx b
        endm

        mac tby
           ldy b
        endm

        mac tab
           sta b
        endm

        mac txb
           stx b
        endm

        mac tyb
           sty b
        endm

        mac inb
           inc b
        endm

        mac deb
           dec b
        endm

        mac addb
           pha
           lda b
           clc
           adc {1}
           sta b
           pla
        endm

        mac subb
           pha
           lda b
           sec
           sbc {1}
           sta b
           pla
        endm

        mac phb
           sta temp_b
           lda b
           pha
           lda temp_b
        endm

        mac plb
           sta temp_b
           pla
           sta b
           lda temp_b
        endm

        mac cpb
           sta temp_b
           lda b
           cmp {1}
           lda temp_b
        endm

        mac ldb
           sta temp_b
           lda {0}
           sta b
           lda temp_b
        endm

        mac stb
           sta temp_b
           lda b
           sta {0}
           lda temp_b
        endm

